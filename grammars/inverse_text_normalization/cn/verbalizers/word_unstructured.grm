import 'common/byte.grm' as b;
import 'common/util.grm' as u;

# i.e. token { word { name: "hahaha" } } ==> hahaha
# Note that 'token { word { name: "hahaha" } }' is generated by taggers/word_structured.grm
# and reordered in TextProcessor::ParseAndReorder(). Indeed, reorder function will do nothing
# for word since it contains only one element, on the contrary, reorder will perform reversing
# for fraction.
graph_word = (
  (u.delete_space)
  (u.Delete["token { word { name: \""])
  (b.kNotSpace+)
  (u.Delete["\" } }"])
  (u.delete_space)
);

export WORD_UNSTRUCTURED = Optimize[graph_word @ CDRewrite[("\u00A0":" "), "", "", b.kBytes*]];
