import 'common/byte.grm' as b;
import 'common/util.grm' as u;
import 'taggers/int.grm' as int;
import 'taggers/float.grm' as float;
import 'taggers/date.grm' as date;
import 'taggers/measure.grm' as measure;
import 'taggers/money.grm' as money;
import 'taggers/telephone.grm' as telephone;
import 'taggers/time.grm' as time;
import 'taggers/word.grm' as word;
import 'taggers/electronic.grm' as electronic;
import 'taggers/whitelist.grm' as whitelist;
import 'taggers/fraction.grm' as fraction;
# import 'taggers/punctuation.grm' as punc;

graph_classifier = (
  (whitelist.graph_whitelist_structured <1.01>)
  | (fraction.graph_fraction_structured <1.09>)
  | (time.graph_time_structured <1.1>)
  | (date.graph_date_structured <1.09>)
  | (float.graph_float_structured <1.1>)
  | (int.graph_int_structured <1.1>)
  | (measure.graph_measure_structured <1.1>)
  | (money.graph_money_structured <1.1>)
  | (telephone.graph_telephone_structured <1.1>)
  | (electronic.graph_electronic_structured <1.1>)
  | (word.graph_word_structured <1000>)
);

token = (
  u.Insert["token { "]
  graph_classifier
  u.Insert[" }"]
);

# punct = (
#   u.Insert["token { "]
#   (punc.graph_punc_structured <1.1>)
#   u.Insert[" }"]
# );
# graph_token_plus_punc = (punct u.delete_space u.Insert[" "])* token (u.Insert[" "] u.delete_space punct)*;

# Example:
#   today is may fifth twenty twelve        ==> token { word { content: "today" } } token { word { content: "is" } } token { date { month: "may-" day: "5th-" year: "2012" } }
#   at first we should do something         ==> token { whitelist { content: "at first" } } token { word { content: "we" } } token { word { content: "should" } } token { word { content: "do" } } token { word { content: "something" } }
#   we have three point twenty three pounds ==> token { word { content: "we" } } token { word { content: "have" } } token { money { interger_part: "" fractional_part: "3.23" currency: "Â£" } }
export TAGGER = Optimize[
  u.delete_space
  token
  (u.Insert[" "] u.delete_space token)*
  u.delete_space
];
